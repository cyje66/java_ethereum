package contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray2;
import org.web3j.abi.datatypes.generated.StaticArray3;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class AccessControl extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50600080546001600160a01b031916331790557ff226a3581336eddc2fea8ee01adc4bf91105725cfb4ce0650955005002d7042f6001557f42582e08c0007c93b1a9800aabe83dd42d815eeeb7ded4e302e616cf0609e19760025561319a8061007a6000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c8063713eca2811610125578063b1999937116100ad578063e022d77c1161007c578063e022d77c146104bf578063e0d25949146104d2578063f214aba0146104e5578063fa19d4f0146104f8578063fa93f8831461050b57600080fd5b8063b199993714610465578063b238ad0e14610486578063c30cfa2d14610499578063c80edca4146104ac57600080fd5b80638aa001fc116100f45780638aa001fc146103f357806392d6631314610406578063a324ad241461042c578063a4dae3f91461043f578063a6f0e5771461045257600080fd5b8063713eca28146103a557806372fb4a14146103c55780637ec8da8d146103d857806384dfba46146103eb57600080fd5b8063322b24aa116101a857806347f95d551161017757806347f95d55146103465780634ac1ad78146103595780634d4800891461036c57806365c728401461037f578063675ca0431461039257600080fd5b8063322b24aa146102e8578063347b8456146102fb5780633e239e1a1461030e57806346d5fce31461033357600080fd5b80630b0dbcfa116101e45780630b0dbcfa1461028e57806314c67060146102a15780631e97f5fa146102c25780631eb5cb66146102d557600080fd5b80630220a5b41461021657806304e960d71461022b57806309d3ef31146102535780630afb4ddc1461027b575b600080fd5b6102296102243660046129db565b61051e565b005b61023e61023936600461299e565b61067c565b60405190151581526020015b60405180910390f35b610266610261366004612c5f565b61081a565b6040805192835260208301919091520161024a565b610266610289366004612c47565b610849565b61023e61029c366004612c5f565b6108a0565b60006001815b6040805193845260208401929092529082015260600161024a565b6102296102d03660046129db565b610992565b6102296102e33660046129db565b610b1e565b6102666102f6366004612c80565b610cdf565b610229610309366004612b3d565b610d30565b61032161031c366004612c47565b6111a4565b60405160ff909116815260200161024a565b6102296103413660046129db565b6111c8565b610229610354366004612bcc565b611354565b610321610367366004612c47565b6115c8565b61022961037a366004612a62565b6115e4565b61032161038d366004612c47565b61168f565b6102666103a0366004612c80565b6116a4565b6103b86103b3366004612cab565b6116f4565b60405161024a9190612de5565b6102666103d3366004612c80565b611725565b6103b86103e6366004612c5f565b6117f1565b600080610266565b610321610401366004612c47565b61184a565b610419610414366004612c47565b611857565b60405161ffff909116815260200161024a565b61032161043a366004612c47565b611947565b61022961044d366004612aa6565b61195c565b61023e610460366004612c2d565b611b52565b610478610473366004612c47565b611bb1565b60405190815260200161024a565b610321610494366004612d1e565b611bf6565b61023e6104a7366004612c5f565b611cbc565b6102a76104ba366004612c80565b611ce0565b6102666104cd366004612cab565b611f34565b6102296104e0366004612a16565b611f69565b6102a76104f3366004612cdc565b611ffc565b610229610506366004612afa565b612103565b610321610519366004612c47565b6121b1565b6000546001600160a01b0316331461053557600080fd5b6004816040516105459190612da7565b9081526040519081900360200190205460ff16151560011461056657600080fd5b60006003826040516105789190612da7565b908152602001604051809103902060060160006101000a81548160ff0219169083151502179055506040518060400160405280600a8152602001691d195c9b5a5b985d195960b21b8152506003826040516105d39190612da7565b908152602001604051809103902060070190805190602001906105f792919061276a565b50600160048260405161060a9190612da7565b908152604051908190036020019020805491151563010000000263ff0000001990921691909117905561063b6121bf565b816040516106499190612da7565b604051908190038120907fb7741e4d6d2393f18db5d8310e3bd19ed4f92cd920e1249dea1907868e954ff190600090a350565b8151600090158061069c5750825160008051602061312583398151915211155b806106a957506020830151155b156106b657506000610813565b815160208301516106c791906108a0565b6106d357506000610813565b6000808080806106f8886001602002015160008051602061312583398151915261228b565b90506107567f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2967f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5600080516020613125833981519152848d09611725565b885160208a01518b519398509195506107849290919060008051602061312583398151915290859009611725565b90945091506000610797868587866116f4565b60408101519091506107b25760009650505050505050610813565b60006107d38260026020020151600160601b63ffffffff60c01b031961228b565b9050600160601b63ffffffff60c01b0319808283098351098a51909150610808600080516020613125833981519152836130b4565b149750505050505050505b9392505050565b600080600061082b85856001611ce0565b9196509450905061083d8585836116a4565b92509250509250929050565b6000806108977f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2967f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f585611725565b91509150915091565b60008215806108bc5750600160601b63ffffffff60c01b031983145b806108c5575081155b806108dd5750600160601b63ffffffff60c01b031982145b156108ea5750600061098c565b6000600160601b63ffffffff60c01b031983840990506000600160601b63ffffffff60c01b031985600160601b63ffffffff60c01b0319878809099050600160601b63ffffffff60c01b0319806bfffffffffffffffffffffffd63ffffffff60c01b0319870982089050600160601b63ffffffff60c01b03197f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b820890501490505b92915050565b6000546001600160a01b031633146109a957600080fd5b6004816040516109b99190612da7565b9081526040519081900360200190205460ff1615156001146109da57600080fd5b6004816040516109ea9190612da7565b9081526040519081900360200190205460ff63010000009091041615610a0f57600080fd5b6001600382604051610a219190612da7565b908152602001604051809103902060060160006101000a81548160ff021916908315150217905550604051806040016040528060058152602001641d985b1a5960da1b815250600382604051610a779190612da7565b90815260200160405180910390206007019080519060200190610a9b92919061276a565b506001600482604051610aae9190612da7565b9081526040519081900360200190208054911515620100000262ff000019909216919091179055610add6121bf565b81604051610aeb9190612da7565b604051908190038120907fe55123e1db72cb7de50471cf5325a61ec3574cd32cfc7b315d7c929e66ae5b5a90600090a350565b6000546001600160a01b03163314610b3557600080fd5b600481604051610b459190612da7565b9081526040519081900360200190205460ff161515600114610b6657600080fd5b600481604051610b769190612da7565b9081526040519081900360200190205460ff63010000009091041615610b9b57600080fd5b600481604051610bab9190612da7565b9081526040519081900360200190205460ff610100909104161515600114610bd257600080fd5b6001600382604051610be49190612da7565b908152602001604051809103902060060160006101000a81548160ff021916908315150217905550604051806040016040528060058152602001641d985b1a5960da1b815250600382604051610c3a9190612da7565b90815260200160405180910390206007019080519060200190610c5e92919061276a565b506000600482604051610c719190612da7565b90815260405190819003602001902080549115156101000261ff0019909216919091179055610c9e6121bf565b81604051610cac9190612da7565b604051908190038120907faa5eb4d0f91b64148441fc369c2b236619734fbeb7121a05530a702d3f6c51c290600090a350565b60008084846001835b86811015610d1457610cfb848484611ce0565b9195509350915080610d0c81613058565b915050610ce8565b50610d208383836116a4565b945094505050505b935093915050565b600384604051610d409190612da7565b9081526020016040518091039020600401548314610ddb57610d606121bf565b600385604051610d709190612da7565b9081526020016040518091039020600101604051610d8e9190612d82565b604051809103902085604051610da49190612da7565b604051809103902060008051602061314583398151915286856001604051610dce93929190612e16565b60405180910390a4611173565b600384604051610deb9190612da7565b90815260405190819003602001902054336001600160a01b0390911614610e8257610e146121bf565b600385604051610e249190612da7565b9081526020016040518091039020600101604051610e429190612d82565b604051809103902085604051610e589190612da7565b604051809103902060008051602061314583398151915286856002604051610dce93929190612e16565b610fb46002808486604051602001610e9b929190612dc3565b60408051601f1981840301815290829052610eb591612da7565b602060405180830381855afa158015610ed2573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610ef59190612986565b604051602001610f0791815260200190565b60408051601f1981840301815290829052610f2191612da7565b602060405180830381855afa158015610f3e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610f619190612986565b82600387604051610f729190612da7565b9081526040805191829003602001822082820190915260010160028282826020028201915b815481526020019060010190808311610f9757505050505061067c565b158015610fd65750610fd460028385604051602001610f07929190612dc3565b155b1561105157610fe36121bf565b600385604051610ff39190612da7565b90815260200160405180910390206001016040516110119190612d82565b6040518091039020856040516110279190612da7565b604051809103902060008051602061314583398151915286856003604051610dce93929190612e16565b60015461105f83600061234b565b14158015611079575060025461107683600061234b565b14155b156110f4576110866121bf565b6003856040516110969190612da7565b90815260200160405180910390206001016040516110b49190612d82565b6040518091039020856040516110ca9190612da7565b604051809103902060008051602061314583398151915286856004604051610dce93929190612e16565b6110fc6121bf565b60038560405161110c9190612da7565b908152602001604051809103902060010160405161112a9190612d82565b6040518091039020856040516111409190612da7565b60405180910390206000805160206131458339815191528685600060405161116a93929190612e16565b60405180910390a45b61117b6121bf565b60038560405161118b9190612da7565b9081526040519081900360200190206005015550505050565b60006018603c6111b48185612ebe565b6111be9190612ebe565b61098c91906130b4565b6000546001600160a01b031633146111df57600080fd5b6004816040516111ef9190612da7565b9081526040519081900360200190205460ff16151560011461121057600080fd5b6004816040516112209190612da7565b9081526040519081900360200190205460ff6301000000909104161561124557600080fd5b60006003826040516112579190612da7565b908152602001604051809103902060060160006101000a81548160ff021916908315150217905550604051806040016040528060078152602001661cdd5cdc195b9960ca1b8152506003826040516112af9190612da7565b908152602001604051809103902060070190805190602001906112d392919061276a565b5060016004826040516112e69190612da7565b90815260405190819003602001902080549115156101000261ff00199092169190911790556113136121bf565b816040516113219190612da7565b604051908190038120907f21ac7408548c970086d533b0139ee6bd43ad7bd6ebc06b0466419e11e1e7466f90600090a350565b6000546001600160a01b0316331461136b57600080fd5b60048260405161137b9190612da7565b9081526040519081900360200190205460ff161561139857600080fd5b6004826040516113a89190612da7565b9081526040519081900360200190205460ff630100000090910416156113cd57600080fd5b806003836040516113de9190612da7565b9081526020016040518091039020600301908051906020019061140292919061276a565b5060006003836040516114159190612da7565b908152602001604051809103902060060160006101000a81548160ff021916908315150217905550604051806040016040528060078152602001661a5b9d985b1a5960ca1b81525060038360405161146d9190612da7565b9081526020016040518091039020600701908051906020019061149192919061276a565b5060016004836040516114a49190612da7565b908152604051908190036020018120805492151560ff19909316929092179091556000906004906114d6908590612da7565b90815260405190819003602001812080549215156101000261ff00199093169290921790915560009060049061150d908590612da7565b9081526040519081900360200181208054921515620100000262ff00001990931692909217909155600090600490611546908590612da7565b908152604051908190036020019020805491151563010000000263ff000000199092169190911790556115776121bf565b826040516115859190612da7565b60405180910390207f44d95adff991b8444cd1878c0022cd2129ad7ea5f01b31f1acc45d7d69ca87dc836040516115bc9190612e73565b60405180910390a35050565b600060076115d96201518084612ebe565b6111be906004612ea6565b6000546001600160a01b031633146115fb57600080fd5b8060038360405161160c9190612da7565b908152602001604051809103902060010190600261162b9291906127ee565b508060405161163a9190612d4e565b6040518091039020826040516116509190612da7565b60405180910390207fe94d8b174118cda53a87a17414d6f28da21d01ad1e159eccedc4374f73b375ae6116816121bf565b6040519081526020016115bc565b600061169a826123b6565b6040015192915050565b60008060006116c184600160601b63ffffffff60c01b031961228b565b9050600160601b63ffffffff60c01b03198187099250600160601b63ffffffff60c01b0319818609915050935093915050565b6116fc61281b565b60008061170b87878787611f34565b909250905061171a82826117f1565b979650505050505050565b6000808261173a576000805b91509150610d28565b826001141561174d575083905082610d28565b826002141561176057611731858561081a565b508390508281816001806117756002886130b4565b61178157600094508495505b600187901c96505b86156117d65761179a848484611ce0565b919550935091506117ac6002886130b4565b600114156117ca576117c2848484898986611ffc565b919750955090505b600187901c9650611789565b6117e18686836116a4565b9550955050505050935093915050565b6117f961281b565b600160601b63ffffffff60c01b0319600160000860408201819052600160601b63ffffffff60c01b031990840981526040810151600160601b63ffffffff60c01b0319908309602082015292915050565b600061098c603c836130b4565b600080808061186a6301e1338086612ebe565b611876906107b2612ea6565b91506118836107b2611bb1565b6118908361ffff16611bb1565b61189a9190612fd6565b90506118aa816301e28500612f55565b6118b49084612ea6565b9250806118c36107b284612fb3565b61ffff166118d19190612fd6565b6118df906301e13380612f55565b6118e99084612ea6565b92505b8483111561193f57611902610460600184612fb3565b1561191c576119156301e2850084612fd6565b925061192d565b61192a6301e1338084612fd6565b92505b611938600183612fb3565b91506118ec565b509392505050565b6000611952826123b6565b6020015192915050565b6000546001600160a01b0316331461197357600080fd5b6004836040516119839190612da7565b9081526040519081900360200190205460ff630100000090910416156119a857600080fd5b60016003846040516119ba9190612da7565b908152602001604051809103902060060160006101000a81548160ff021916908315150217905550604051806040016040528060058152602001641d985b1a5960da1b815250600384604051611a109190612da7565b90815260200160405180910390206007019080519060200190611a3492919061276a565b5081600384604051611a469190612da7565b9081526020016040518091039020600101906002611a659291906127ee565b5080600384604051611a779190612da7565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b031990931692909217909155600190600490611ab8908690612da7565b9081526040519081900360200181208054921515620100000262ff00001990931692909217909155611aeb908390612d4e565b6040518091039020816001600160a01b031684604051611b0b9190612da7565b60405180910390207f615487f1ca25bcc94581ac4450060efe605200eaa90af1505e659f2b21782a8c611b3c6121bf565b60405190815260200160405180910390a4505050565b6000611b5f600483613093565b61ffff1615611b7057506000919050565b611b7b606483613093565b61ffff1615611b8c57506001919050565b611b9861019083613093565b61ffff1615611ba957506000919050565b506001919050565b6000611bbe600183612fd6565b9150611bcc61019083612ebe565b611bd7606484612ebe565b611be2600485612ebe565b611bec9190612fd6565b61098c9190612ea6565b60008260ff1660011480611c0d57508260ff166003145b80611c1b57508260ff166005145b80611c2957508260ff166007145b80611c3757508260ff166008145b80611c4557508260ff16600a145b80611c5357508260ff16600c145b15611c605750601f61098c565b8260ff1660041480611c7557508260ff166006145b80611c8357508260ff166009145b80611c9157508260ff16600b145b15611c9e5750601e61098c565b611ca782611b52565b15611cb45750601d61098c565b50601c61098c565b600082158015611cca575081155b15611cd75750600161098c565b50600092915050565b6000806000806000806000611cf58a8a611cbc565b15611d0e57600060018196509650965050505050611f2b565b600160601b63ffffffff60c01b0319888a099250600160601b63ffffffff60c01b0319600284099250600160601b63ffffffff60c01b03198a84099150600160601b63ffffffff60c01b03198983099150600160601b63ffffffff60c01b0319600283099150600160601b63ffffffff60c01b03198a8b099950600160601b63ffffffff60c01b031960038b099350600160601b63ffffffff60c01b03198889099750600160601b63ffffffff60c01b03196bfffffffffffffffffffffffd63ffffffff60c01b031989099750600160601b63ffffffff60c01b03198885089350600160601b63ffffffff60c01b03198485099050600160601b63ffffffff60c01b0319826002099950600160601b63ffffffff60c01b0319611e3f8b600160601b63ffffffff60c01b0319612fd6565b82089050600160601b63ffffffff60c01b0319611e6a82600160601b63ffffffff60c01b0319612fd6565b83089950600160601b63ffffffff60c01b03198a85099950600160601b63ffffffff60c01b0319838a099850600160601b63ffffffff60c01b0319898a099850600160601b63ffffffff60c01b0319896002099850600160601b63ffffffff60c01b0319611ee68a600160601b63ffffffff60c01b0319612fd6565b8b089550600160601b63ffffffff60c01b03198184099650600160601b63ffffffff60c01b03198384099450600160601b63ffffffff60c01b03198386099450505050505b93509350939050565b6000806000611f498787600188886001611ffc565b91985096509050611f5b8787836116a4565b925092505094509492505050565b6000546001600160a01b03163314611f8057600080fd5b80600383604051611f919190612da7565b90815260405190819003602001812080546001600160a01b039384166001600160a01b031990911617905590821690611fcb908490612da7565b60405180910390207f5b5058091fa75812f5b046527cb9bf60fcdebf6781bfa1723139dd64483e14216116816121bf565b60008060008060008060006120118d8d611cbc565b1561202857898989965096509650505050506120f7565b6120328a8a611cbc565b15612049578c8c8c965096509650505050506120f7565b600160601b63ffffffff60c01b0319888d099350600160601b63ffffffff60c01b03198b8a099250600160601b63ffffffff60c01b0319888e099150600160601b63ffffffff60c01b03198b8b099050808214156120cd57828414156120c3576120b48d8d8d611ce0565b965096509650505050506120f7565b60006001816120b4565b6120eb600160601b63ffffffff60c01b0319898d098383868861259e565b91985096509450505050505b96509650969350505050565b6000546001600160a01b0316331461211a57600080fd5b60048260405161212a9190612da7565b9081526040519081900360200190205460ff16151560011461214b57600080fd5b8060038360405161215c9190612da7565b90815260200160405180910390206004018190555080826040516121809190612da7565b60405180910390207f4eef89800ccf0dd4f4020d6b987885188fa298c7640f3d7622a49dc5ad47a4b26116816121bf565b6000603c6111be8184612ebe565b600080806121d261041442617080612ea6565b61ffff16905060006121e961043a42617080612ea6565b60ff16905060006121ff61038d42617080612ea6565b60ff169050600061221561031c42617080612ea6565b60ff169050600061222b61051942617080612ea6565b60ff1690508061223c836064612f55565b61224885612710612f55565b61225587620f4240612f55565b612263896305f5e100612f55565b61226d9190612ea6565b6122779190612ea6565b6122819190612ea6565b61171a9190612ea6565b600082158061229957508183145b806122a2575081155b156122af5750600061098c565b818311156122c4576122c182846130b4565b92505b600060018385835b8115612317576122dc8284612ebe565b9050836122e98183612ed2565b6122f39087612f74565b836122fe8185612f55565b6123089087612fd6565b929750909550935091506122cc565b600085121561233f57612329856130c8565b6123339088612fd6565b9550505050505061098c565b50929695505050505050565b60008060005b602081101561193f57612365816008612f55565b856123708387612ea6565b8151811061238e57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916901c9190911790806123ae81613058565b915050612351565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290529080806123fa85611857565b61ffff16845261240b6107b2611bb1565b845161241a9061ffff16611bb1565b6124249190612fd6565b9150612434826301e28500612f55565b61243e9084612ea6565b9250816107b285600001516124539190612fb3565b61ffff166124619190612fd6565b61246f906301e13380612f55565b6124799084612ea6565b92506000600191505b600c8260ff16116124ea5761249b828660000151611bf6565b6124ab9060ff1662015180612f55565b9050856124b88583612ea6565b11156124cc5760ff821660208601526124ea565b6124d68185612ea6565b9350816124e281613073565b925050612482565b600191505b61250185602001518660000151611bf6565b60ff168260ff1611612550578561251b8562015180612ea6565b111561252f5760ff82166040860152612550565b61253c6201518085612ea6565b93508161254881613073565b9250506124ef565b612559866111a4565b60ff16606086015261256a866121b1565b60ff16608086015261257b8661184a565b60ff1660a086015261258c866115c8565b60ff1660c08601525092949350505050565b600080808080808080600160601b63ffffffff60c01b03196125ce8b600160601b63ffffffff60c01b0319612fd6565b8a089050600160601b63ffffffff60c01b03196125f98c600160601b63ffffffff60c01b0319612fd6565b8d089450600160601b63ffffffff60c01b03198586099350600160601b63ffffffff60c01b03198182099150600160601b63ffffffff60c01b03198d83099150600160601b63ffffffff60c01b03198c8c089a50600160601b63ffffffff60c01b0319848c099a50600160601b63ffffffff60c01b03196126888c600160601b63ffffffff60c01b0319612fd6565b83089150600160601b63ffffffff60c01b03198286099750600160601b63ffffffff60c01b03198585099250600160601b63ffffffff60c01b0319848d099b50600160601b63ffffffff60c01b03196126ef83600160601b63ffffffff60c01b0319612fd6565b8d089b50600160601b63ffffffff60c01b03198c82099050600160601b63ffffffff60c01b0319838a099850600160601b63ffffffff60c01b03196127428a600160601b63ffffffff60c01b0319612fd6565b82089650600160601b63ffffffff60c01b03198d840995505050505050955095509592505050565b8280546127769061301d565b90600052602060002090601f01602090048101928261279857600085556127de565b82601f106127b157805160ff19168380011785556127de565b828001600101855582156127de579182015b828111156127de5782518255916020019190600101906127c3565b506127ea929150612839565b5090565b82600281019282156127de57916020028201828111156127de5782518255916020019190600101906127c3565b60405180606001604052806003906020820280368337509192915050565b5b808211156127ea576000815560010161283a565b600067ffffffffffffffff808411156128695761286961310e565b604051601f8501601f19908116603f011681019082821181831017156128915761289161310e565b816040528093508581528686860111156128aa57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146128db57600080fd5b919050565b600082601f8301126128f0578081fd5b6040516040810181811067ffffffffffffffff821117156129135761291361310e565b8060405250808385604086011115612929578384fd5b835b600281101561294a57813583526020928301929091019060010161292b565b509195945050505050565b600082601f830112612965578081fd5b6108138383356020850161284e565b803561ffff811681146128db57600080fd5b600060208284031215612997578081fd5b5051919050565b600080600060a084860312156129b2578182fd5b833592506129c385602086016128e0565b91506129d285606086016128e0565b90509250925092565b6000602082840312156129ec578081fd5b813567ffffffffffffffff811115612a02578182fd5b612a0e84828501612955565b949350505050565b60008060408385031215612a28578182fd5b823567ffffffffffffffff811115612a3e578283fd5b612a4a85828601612955565b925050612a59602084016128c4565b90509250929050565b60008060608385031215612a74578182fd5b823567ffffffffffffffff811115612a8a578283fd5b612a9685828601612955565b925050612a5984602085016128e0565b600080600060808486031215612aba578283fd5b833567ffffffffffffffff811115612ad0578384fd5b612adc86828701612955565b935050612aec85602086016128e0565b91506129d2606085016128c4565b60008060408385031215612b0c578182fd5b823567ffffffffffffffff811115612b22578283fd5b612b2e85828601612955565b95602094909401359450505050565b60008060008060a08587031215612b52578081fd5b843567ffffffffffffffff80821115612b69578283fd5b612b7588838901612955565b9550602087013594506040870135915080821115612b91578283fd5b508501601f81018713612ba2578182fd5b612bb18782356020840161284e565b925050612bc186606087016128e0565b905092959194509250565b60008060408385031215612bde578182fd5b823567ffffffffffffffff80821115612bf5578384fd5b612c0186838701612955565b93506020850135915080821115612c16578283fd5b50612c2385828601612955565b9150509250929050565b600060208284031215612c3e578081fd5b61081382612974565b600060208284031215612c58578081fd5b5035919050565b60008060408385031215612c71578182fd5b50508035926020909101359150565b600080600060608486031215612c94578081fd5b505081359360208301359350604090920135919050565b60008060008060808587031215612cc0578182fd5b5050823594602084013594506040840135936060013592509050565b60008060008060008060c08789031215612cf4578384fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60008060408385031215612d30578182fd5b823560ff81168114612d40578283fd5b9150612a5960208401612974565b60008183825b6002811015612d73578151835260209283019290910190600101612d54565b50505060408201905092915050565b60008183825b6002811015612d73578154835260209092019160019182019101612d88565b60008251612db9818460208701612fed565b9190910192915050565b60008351612dd5818460208801612fed565b9190910191825250602001919050565b60608101818360005b6003811015612e0d578151835260209283019290910190600101612dee565b50505092915050565b8381526080810160208083018560005b6002811015612e4357815183529183019190830190600101612e26565b5050505060058310612e6557634e487b7160e01b600052602160045260246000fd5b826060830152949350505050565b6020815260008251806020840152612e92816040850160208701612fed565b601f01601f19169190910160400192915050565b60008219821115612eb957612eb96130e2565b500190565b600082612ecd57612ecd6130f8565b500490565b60006001600160ff1b0381841382841380821686840486111615612ef857612ef86130e2565b600160ff1b84871282811687830589121615612f1657612f166130e2565b858712925087820587128484161615612f3157612f316130e2565b87850587128184161615612f4757612f476130e2565b505050929093029392505050565b6000816000190483118215151615612f6f57612f6f6130e2565b500290565b60008083128015600160ff1b850184121615612f9257612f926130e2565b6001600160ff1b0384018313811615612fad57612fad6130e2565b50500390565b600061ffff83811690831681811015612fce57612fce6130e2565b039392505050565b600082821015612fe857612fe86130e2565b500390565b60005b83811015613008578181015183820152602001612ff0565b83811115613017576000848401525b50505050565b600181811c9082168061303157607f821691505b6020821081141561305257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561306c5761306c6130e2565b5060010190565b600060ff821660ff81141561308a5761308a6130e2565b60010192915050565b600061ffff808416806130a8576130a86130f8565b92169190910692915050565b6000826130c3576130c36130f8565b500690565b6000600160ff1b8214156130de576130de6130e2565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfeffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255107707cb75095f7891fa428ab7bcad5d5129dec12a6937202c82b5afae6de69d4a26469706673582212200402cb05ab79ae3d97cf15b06b5ac77b829e38f33c6bddba10d6d1d523b4cc0464736f6c63430008040033";

    public static final String FUNC_ADD = "add";

    public static final String FUNC_ADDANDRETURNPROJECTIVEPOINT = "addAndReturnProjectivePoint";

    public static final String FUNC_ADDPROJ = "addProj";

    public static final String FUNC_CREATE_ACCOUNT = "create_Account";

    public static final String FUNC_GETDAY = "getDay";

    public static final String FUNC_GETDAYSINMONTH = "getDaysInMonth";

    public static final String FUNC_GETHOUR = "getHour";

    public static final String FUNC_GETMINUTE = "getMinute";

    public static final String FUNC_GETMONTH = "getMonth";

    public static final String FUNC_GETSECOND = "getSecond";

    public static final String FUNC_GETWEEKDAY = "getWeekday";

    public static final String FUNC_GETYEAR = "getYear";

    public static final String FUNC_GRANT = "grant";

    public static final String FUNC_GRANT_AND_STORE_PK_ETH = "grant_and_store_pk_eth";

    public static final String FUNC_ISLEAPYEAR = "isLeapYear";

    public static final String FUNC_ISONCURVE = "isOnCurve";

    public static final String FUNC_ISZEROCURVE = "isZeroCurve";

    public static final String FUNC_LEAPYEARSBEFORE = "leapYearsBefore";

    public static final String FUNC_MULTIPLEGENERATORBYSCALAR = "multipleGeneratorByScalar";

    public static final String FUNC_MULTIPLYPOWERBASE2 = "multiplyPowerBase2";

    public static final String FUNC_MULTIPLYSCALAR = "multiplyScalar";

    public static final String FUNC_RESUME = "resume";

    public static final String FUNC_STORECLIENTDATAHASH = "storeClientDataHash";

    public static final String FUNC_STORE_ETH_ADDRESS = "store_eth_address";

    public static final String FUNC_STORE_PK = "store_pk";

    public static final String FUNC_SUSPEND = "suspend";

    public static final String FUNC_TERMINATE = "terminate";

    public static final String FUNC_TOAFFINEPOINT = "toAffinePoint";

    public static final String FUNC_TOPROJECTIVEPOINT = "toProjectivePoint";

    public static final String FUNC_TWICE = "twice";

    public static final String FUNC_TWICEPROJ = "twiceProj";

    public static final String FUNC_VALIDATESIG = "validateSig";

    public static final String FUNC_VALIDATESIGNATURE = "validateSignature";

    public static final String FUNC_ZEROAFFINE = "zeroAffine";

    public static final String FUNC_ZEROPROJ = "zeroProj";

    public static final Event ACCOUNTCREATED_EVENT = new Event("AccountCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event ACCOUNTGRANTED_EVENT = new Event("AccountGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event ACCOUNTRESUMED_EVENT = new Event("AccountResumed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event ACCOUNTSUSPENDED_EVENT = new Event("AccountSuspended", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event ACCOUNTTERMINATED_EVENT = new Event("AccountTerminated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event ASSERTIONREQUEST_EVENT = new Event("AssertionRequest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ETHADDRESSSTORED_EVENT = new Event("EthAddressStored", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PUBKEYSTORED_EVENT = new Event("PubkeyStored", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<StaticArray2<Uint256>>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETGRANTADDRPUBKEY_EVENT = new Event("SetGrantAddrPubkey", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<StaticArray2<Uint256>>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SIGNATUREVALIDATED_EVENT = new Event("SignatureValidated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<StaticArray2<Uint256>>() {}, new TypeReference<StaticArray2<Uint256>>(true) {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected AccessControl(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AccessControl(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AccessControl(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AccessControl(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AccountCreatedEventResponse> getAccountCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCOUNTCREATED_EVENT, transactionReceipt);
        ArrayList<AccountCreatedEventResponse> responses = new ArrayList<AccountCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountCreatedEventResponse typedResponse = new AccountCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AccountCreatedEventResponse> accountCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AccountCreatedEventResponse>() {
            @Override
            public AccountCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACCOUNTCREATED_EVENT, log);
                AccountCreatedEventResponse typedResponse = new AccountCreatedEventResponse();
                typedResponse.log = log;
                typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AccountCreatedEventResponse> accountCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTCREATED_EVENT));
        return accountCreatedEventFlowable(filter);
    }

    public List<AccountGrantedEventResponse> getAccountGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCOUNTGRANTED_EVENT, transactionReceipt);
        ArrayList<AccountGrantedEventResponse> responses = new ArrayList<AccountGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountGrantedEventResponse typedResponse = new AccountGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AccountGrantedEventResponse> accountGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AccountGrantedEventResponse>() {
            @Override
            public AccountGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACCOUNTGRANTED_EVENT, log);
                AccountGrantedEventResponse typedResponse = new AccountGrantedEventResponse();
                typedResponse.log = log;
                typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AccountGrantedEventResponse> accountGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTGRANTED_EVENT));
        return accountGrantedEventFlowable(filter);
    }

    public List<AccountResumedEventResponse> getAccountResumedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCOUNTRESUMED_EVENT, transactionReceipt);
        ArrayList<AccountResumedEventResponse> responses = new ArrayList<AccountResumedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountResumedEventResponse typedResponse = new AccountResumedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AccountResumedEventResponse> accountResumedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AccountResumedEventResponse>() {
            @Override
            public AccountResumedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACCOUNTRESUMED_EVENT, log);
                AccountResumedEventResponse typedResponse = new AccountResumedEventResponse();
                typedResponse.log = log;
                typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AccountResumedEventResponse> accountResumedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTRESUMED_EVENT));
        return accountResumedEventFlowable(filter);
    }

    public List<AccountSuspendedEventResponse> getAccountSuspendedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCOUNTSUSPENDED_EVENT, transactionReceipt);
        ArrayList<AccountSuspendedEventResponse> responses = new ArrayList<AccountSuspendedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountSuspendedEventResponse typedResponse = new AccountSuspendedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AccountSuspendedEventResponse> accountSuspendedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AccountSuspendedEventResponse>() {
            @Override
            public AccountSuspendedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACCOUNTSUSPENDED_EVENT, log);
                AccountSuspendedEventResponse typedResponse = new AccountSuspendedEventResponse();
                typedResponse.log = log;
                typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AccountSuspendedEventResponse> accountSuspendedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTSUSPENDED_EVENT));
        return accountSuspendedEventFlowable(filter);
    }

    public List<AccountTerminatedEventResponse> getAccountTerminatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCOUNTTERMINATED_EVENT, transactionReceipt);
        ArrayList<AccountTerminatedEventResponse> responses = new ArrayList<AccountTerminatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountTerminatedEventResponse typedResponse = new AccountTerminatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AccountTerminatedEventResponse> accountTerminatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AccountTerminatedEventResponse>() {
            @Override
            public AccountTerminatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACCOUNTTERMINATED_EVENT, log);
                AccountTerminatedEventResponse typedResponse = new AccountTerminatedEventResponse();
                typedResponse.log = log;
                typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._time = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AccountTerminatedEventResponse> accountTerminatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTTERMINATED_EVENT));
        return accountTerminatedEventFlowable(filter);
    }

    public List<AssertionRequestEventResponse> getAssertionRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ASSERTIONREQUEST_EVENT, transactionReceipt);
        ArrayList<AssertionRequestEventResponse> responses = new ArrayList<AssertionRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssertionRequestEventResponse typedResponse = new AssertionRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._clientDataHash = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AssertionRequestEventResponse> assertionRequestEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AssertionRequestEventResponse>() {
            @Override
            public AssertionRequestEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ASSERTIONREQUEST_EVENT, log);
                AssertionRequestEventResponse typedResponse = new AssertionRequestEventResponse();
                typedResponse.log = log;
                typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._clientDataHash = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AssertionRequestEventResponse> assertionRequestEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSERTIONREQUEST_EVENT));
        return assertionRequestEventFlowable(filter);
    }

    public List<EthAddressStoredEventResponse> getEthAddressStoredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ETHADDRESSSTORED_EVENT, transactionReceipt);
        ArrayList<EthAddressStoredEventResponse> responses = new ArrayList<EthAddressStoredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EthAddressStoredEventResponse typedResponse = new EthAddressStoredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.addr = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EthAddressStoredEventResponse> ethAddressStoredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EthAddressStoredEventResponse>() {
            @Override
            public EthAddressStoredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ETHADDRESSSTORED_EVENT, log);
                EthAddressStoredEventResponse typedResponse = new EthAddressStoredEventResponse();
                typedResponse.log = log;
                typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.addr = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EthAddressStoredEventResponse> ethAddressStoredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ETHADDRESSSTORED_EVENT));
        return ethAddressStoredEventFlowable(filter);
    }

    public List<PubkeyStoredEventResponse> getPubkeyStoredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PUBKEYSTORED_EVENT, transactionReceipt);
        ArrayList<PubkeyStoredEventResponse> responses = new ArrayList<PubkeyStoredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PubkeyStoredEventResponse typedResponse = new PubkeyStoredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pk = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PubkeyStoredEventResponse> pubkeyStoredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PubkeyStoredEventResponse>() {
            @Override
            public PubkeyStoredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PUBKEYSTORED_EVENT, log);
                PubkeyStoredEventResponse typedResponse = new PubkeyStoredEventResponse();
                typedResponse.log = log;
                typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pk = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PubkeyStoredEventResponse> pubkeyStoredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PUBKEYSTORED_EVENT));
        return pubkeyStoredEventFlowable(filter);
    }

    public List<SetGrantAddrPubkeyEventResponse> getSetGrantAddrPubkeyEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETGRANTADDRPUBKEY_EVENT, transactionReceipt);
        ArrayList<SetGrantAddrPubkeyEventResponse> responses = new ArrayList<SetGrantAddrPubkeyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetGrantAddrPubkeyEventResponse typedResponse = new SetGrantAddrPubkeyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.addr = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.pk = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetGrantAddrPubkeyEventResponse> setGrantAddrPubkeyEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetGrantAddrPubkeyEventResponse>() {
            @Override
            public SetGrantAddrPubkeyEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETGRANTADDRPUBKEY_EVENT, log);
                SetGrantAddrPubkeyEventResponse typedResponse = new SetGrantAddrPubkeyEventResponse();
                typedResponse.log = log;
                typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.addr = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.pk = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetGrantAddrPubkeyEventResponse> setGrantAddrPubkeyEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETGRANTADDRPUBKEY_EVENT));
        return setGrantAddrPubkeyEventFlowable(filter);
    }

    public List<SignatureValidatedEventResponse> getSignatureValidatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNATUREVALIDATED_EVENT, transactionReceipt);
        ArrayList<SignatureValidatedEventResponse> responses = new ArrayList<SignatureValidatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignatureValidatedEventResponse typedResponse = new SignatureValidatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pubk = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.message = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.rs = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.result = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignatureValidatedEventResponse> signatureValidatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SignatureValidatedEventResponse>() {
            @Override
            public SignatureValidatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNATUREVALIDATED_EVENT, log);
                SignatureValidatedEventResponse typedResponse = new SignatureValidatedEventResponse();
                typedResponse.log = log;
                typedResponse._accountID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pubk = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.message = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.rs = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.result = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SignatureValidatedEventResponse> signatureValidatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNATUREVALIDATED_EVENT));
        return signatureValidatedEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> add(BigInteger x0, BigInteger y0, BigInteger x1, BigInteger y1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x0), 
                new org.web3j.abi.datatypes.generated.Uint256(y0), 
                new org.web3j.abi.datatypes.generated.Uint256(x1), 
                new org.web3j.abi.datatypes.generated.Uint256(y1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> addAndReturnProjectivePoint(BigInteger x1, BigInteger y1, BigInteger x2, BigInteger y2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADDANDRETURNPROJECTIVEPOINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x1), 
                new org.web3j.abi.datatypes.generated.Uint256(y1), 
                new org.web3j.abi.datatypes.generated.Uint256(x2), 
                new org.web3j.abi.datatypes.generated.Uint256(y2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray3<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> addProj(BigInteger x0, BigInteger y0, BigInteger z0, BigInteger x1, BigInteger y1, BigInteger z1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADDPROJ, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x0), 
                new org.web3j.abi.datatypes.generated.Uint256(y0), 
                new org.web3j.abi.datatypes.generated.Uint256(z0), 
                new org.web3j.abi.datatypes.generated.Uint256(x1), 
                new org.web3j.abi.datatypes.generated.Uint256(y1), 
                new org.web3j.abi.datatypes.generated.Uint256(z1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> create_Account(String _accountID, String _name) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATE_ACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_accountID), 
                new org.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getDay(BigInteger timestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETDAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getDaysInMonth(BigInteger month, BigInteger year) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETDAYSINMONTH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(month), 
                new org.web3j.abi.datatypes.generated.Uint16(year)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getHour(BigInteger timestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETHOUR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getMinute(BigInteger timestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETMINUTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getMonth(BigInteger timestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETMONTH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getSecond(BigInteger timestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSECOND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getWeekday(BigInteger timestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETWEEKDAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getYear(BigInteger timestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETYEAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grant(String _accountID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_accountID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> grant_and_store_pk_eth(String _accountID, List<BigInteger> pubk, String addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANT_AND_STORE_PK_ETH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_accountID), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(pubk, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.Address(160, addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isLeapYear(BigInteger year) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISLEAPYEAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint16(year)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOnCurve(BigInteger x, BigInteger y) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISONCURVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x), 
                new org.web3j.abi.datatypes.generated.Uint256(y)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isZeroCurve(BigInteger x0, BigInteger y0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISZEROCURVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x0), 
                new org.web3j.abi.datatypes.generated.Uint256(y0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> leapYearsBefore(BigInteger year) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LEAPYEARSBEFORE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(year)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> multipleGeneratorByScalar(BigInteger scalar) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MULTIPLEGENERATORBYSCALAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(scalar)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> multiplyPowerBase2(BigInteger x0, BigInteger y0, BigInteger exp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MULTIPLYPOWERBASE2, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x0), 
                new org.web3j.abi.datatypes.generated.Uint256(y0), 
                new org.web3j.abi.datatypes.generated.Uint256(exp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> multiplyScalar(BigInteger x0, BigInteger y0, BigInteger scalar) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MULTIPLYSCALAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x0), 
                new org.web3j.abi.datatypes.generated.Uint256(y0), 
                new org.web3j.abi.datatypes.generated.Uint256(scalar)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> resume(String _accountID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RESUME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_accountID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> storeClientDataHash(String _accountID, byte[] _clientDataHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STORECLIENTDATAHASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_accountID), 
                new org.web3j.abi.datatypes.generated.Bytes32(_clientDataHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> store_eth_address(String _accountID, String addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STORE_ETH_ADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_accountID), 
                new org.web3j.abi.datatypes.Address(160, addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> store_pk(String _accountID, List<BigInteger> pubk) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STORE_PK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_accountID), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(pubk, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> suspend(String _accountID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SUSPEND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_accountID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> terminate(String _accountID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TERMINATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_accountID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> toAffinePoint(BigInteger x0, BigInteger y0, BigInteger z0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOAFFINEPOINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x0), 
                new org.web3j.abi.datatypes.generated.Uint256(y0), 
                new org.web3j.abi.datatypes.generated.Uint256(z0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> toProjectivePoint(BigInteger x0, BigInteger y0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOPROJECTIVEPOINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x0), 
                new org.web3j.abi.datatypes.generated.Uint256(y0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray3<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> twice(BigInteger x0, BigInteger y0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TWICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x0), 
                new org.web3j.abi.datatypes.generated.Uint256(y0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> twiceProj(BigInteger x0, BigInteger y0, BigInteger z0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TWICEPROJ, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x0), 
                new org.web3j.abi.datatypes.generated.Uint256(y0), 
                new org.web3j.abi.datatypes.generated.Uint256(z0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> validateSig(String _accountID, byte[] clientDataHash, byte[] authData, List<BigInteger> rs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_VALIDATESIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_accountID), 
                new org.web3j.abi.datatypes.generated.Bytes32(clientDataHash), 
                new org.web3j.abi.datatypes.DynamicBytes(authData), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(rs, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> validateSignature(byte[] message, List<BigInteger> rs, List<BigInteger> Q) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VALIDATESIGNATURE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(message), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(rs, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(Q, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> zeroAffine() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ZEROAFFINE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> zeroProj() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ZEROPROJ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    @Deprecated
    public static AccessControl load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AccessControl(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AccessControl load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AccessControl(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AccessControl load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AccessControl(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AccessControl load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AccessControl(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AccessControl> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AccessControl.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AccessControl> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AccessControl.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<AccessControl> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AccessControl.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AccessControl> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AccessControl.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AccountCreatedEventResponse extends BaseEventResponse {
        public byte[] _accountID;

        public BigInteger _time;

        public String _name;
    }

    public static class AccountGrantedEventResponse extends BaseEventResponse {
        public byte[] _accountID;

        public BigInteger _time;
    }

    public static class AccountResumedEventResponse extends BaseEventResponse {
        public byte[] _accountID;

        public BigInteger _time;
    }

    public static class AccountSuspendedEventResponse extends BaseEventResponse {
        public byte[] _accountID;

        public BigInteger _time;
    }

    public static class AccountTerminatedEventResponse extends BaseEventResponse {
        public byte[] _accountID;

        public BigInteger _time;
    }

    public static class AssertionRequestEventResponse extends BaseEventResponse {
        public byte[] _accountID;

        public byte[] _clientDataHash;

        public BigInteger _time;
    }

    public static class EthAddressStoredEventResponse extends BaseEventResponse {
        public byte[] _accountID;

        public String addr;

        public BigInteger _time;
    }

    public static class PubkeyStoredEventResponse extends BaseEventResponse {
        public byte[] _accountID;

        public byte[] pk;

        public BigInteger _time;
    }

    public static class SetGrantAddrPubkeyEventResponse extends BaseEventResponse {
        public byte[] _accountID;

        public String addr;

        public byte[] pk;

        public BigInteger _time;
    }

    public static class SignatureValidatedEventResponse extends BaseEventResponse {
        public byte[] _accountID;

        public byte[] pubk;

        public BigInteger _time;

        public byte[] message;

        public List<BigInteger> rs;

        public BigInteger result;
    }
}
